#include <pebble.h>

#if defined(PBL_COLOR)
#else
#endif

#if defined(PBL_RECT)
#define MSG_BOX_HEIGHT_DIVIDER 5
#define MSG_BOX_LAYER_X_CORRECTION_FACTOR 0
#define MSG_BOX_LAYER_Y_CORRECTION_FACTOR 0
#define BTN_DESC_WIDTH_DIVIDER 5
#define BTN_DESC_HEIGHT_DIVIDER 2.7
#define BTN_DESC_LAYER_Y_CORRECTION_FACTOR 0
#else
#define MSG_BOX_HEIGHT_DIVIDER 3.5
#define MSG_BOX_LAYER_X_CORRECTION_FACTOR 0.05
#define MSG_BOX_LAYER_Y_CORRECTION_FACTOR 0.25
#define BTN_DESC_WIDTH_DIVIDER 4
#define BTN_DESC_HEIGHT_DIVIDER 2.4
#define BTN_DESC_LAYER_Y_CORRECTION_FACTOR 0.2
#endif
#define MSG_BOX_WIDTH(x) (x-BTN_DESC_WIDTH(x))
#define MSG_BOX_HEIGHT(y) (y/MSG_BOX_HEIGHT_DIVIDER)
#define MSG_BOX_LAYER_X_CORRECTION(x) (MSG_BOX_LAYER_X_CORRECTION_FACTOR * MSG_BOX_WIDTH(x))
#define MSG_BOX_LAYER_Y_CORRECTION(y) (MSG_BOX_LAYER_Y_CORRECTION_FACTOR * MSG_BOX_HEIGHT(y))
#define BTN_DESC_WIDTH(x) (x/BTN_DESC_WIDTH_DIVIDER)
#define BTN_DESC_HEIGHT(y) (y/BTN_DESC_HEIGHT_DIVIDER)
#define BTN_DESC_X_LEFT(x) (x-(x/BTN_DESC_WIDTH_DIVIDER))
#define BTN_DESC_Y_TOP(y) (BTN_DESC_HEIGHT(y)/2)-(FONT_DEFAULT_SIZE/2)
#define BTN_DESC_LAYER_Y_CORRECTION(y) (BTN_DESC_LAYER_Y_CORRECTION_FACTOR * BTN_DESC_HEIGHT(y))

typedef enum { STATE_STANDBY, STATE_STOPPED, STATE_RUNNING, STATE_EXPIRED } TimerState;
typedef enum { TIMER_ZERO=0, TIMER_INTERMISSION=60, TIMER_TIMEOUT_SHORT=30, TIMER_TIMEOUT_DEFAULT=60 } Time;

typedef struct TimerInfo {
	TimerState state;
	Time startValue;
	bool isRunning;
	char *stateMessage;
} TimerInfo;

typedef struct Timer {
	const TimerInfo *info;
	Time value;
	char *valueDisplay;
	char *stateMessage;
} Timer;

const TimerInfo TIMER_STANDBY = { STATE_STANDBY, TIMER_ZERO, false, "STANDBY" };
const TimerInfo TIMER_STOPPED_TIMEOUT_DEFAULT = { STATE_STOPPED, TIMER_ZERO, false, "TIMEOUT STOPPED" };
const TimerInfo TIMER_RUNNING_TIMEOUT_DEFAULT = { STATE_RUNNING, TIMER_TIMEOUT_DEFAULT, true, "TIMEOUT RUNNING" };
const TimerInfo TIMER_EXPIRED_TIMEOUT_DEFAULT = { STATE_EXPIRED, TIMER_ZERO, false, "TIMEOUT EXPIRED" };
const TimerInfo TIMER_STOPPED_TIMEOUT_SHORT = { STATE_STOPPED, TIMER_ZERO, false, "30'' TO STOPPED" };
const TimerInfo TIMER_RUNNING_TIMEOUT_SHORT = { STATE_RUNNING, TIMER_TIMEOUT_SHORT, true, "30'' TO RUNNING" };
const TimerInfo TIMER_EXPIRED_TIMEOUT_SHORT = { STATE_EXPIRED, TIMER_ZERO, false, "30'' TO EXPIRED" };
const TimerInfo TIMER_STOPPED_INTERMISSION = { STATE_STOPPED, TIMER_ZERO, false, "1' IM STOPPED" };
const TimerInfo TIMER_RUNNING_INTERMISSION = { STATE_RUNNING, TIMER_INTERMISSION, true, "1' IM RUNNING" };
const TimerInfo TIMER_EXPIRED_INTERMISSION = { STATE_EXPIRED, TIMER_ZERO, false, "1' IM EXPIRED" };

const char *TEXT_HEADLINE = "UMPIRECLOCK";
